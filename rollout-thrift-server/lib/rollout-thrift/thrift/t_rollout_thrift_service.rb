#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'rollout-thrift_types'

module Com
  module Personali
    module RolloutThrift
      module TRolloutThriftService
        class Client
          include ::Thrift::Client

          def isActive(feature)
            send_isActive(feature)
            return recv_isActive()
          end

          def send_isActive(feature)
            send_message('isActive', IsActive_args, :feature => feature)
          end

          def recv_isActive()
            result = receive_message(IsActive_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isActive failed: unknown result')
          end

          def isActiveForUser(feature, userId)
            send_isActiveForUser(feature, userId)
            return recv_isActiveForUser()
          end

          def send_isActiveForUser(feature, userId)
            send_message('isActiveForUser', IsActiveForUser_args, :feature => feature, :userId => userId)
          end

          def recv_isActiveForUser()
            result = receive_message(IsActiveForUser_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isActiveForUser failed: unknown result')
          end

          def activate(feature)
            send_activate(feature)
            recv_activate()
          end

          def send_activate(feature)
            send_message('activate', Activate_args, :feature => feature)
          end

          def recv_activate()
            result = receive_message(Activate_result)
            return
          end

          def activatePercentage(feature, percentage)
            send_activatePercentage(feature, percentage)
            recv_activatePercentage()
          end

          def send_activatePercentage(feature, percentage)
            send_message('activatePercentage', ActivatePercentage_args, :feature => feature, :percentage => percentage)
          end

          def recv_activatePercentage()
            result = receive_message(ActivatePercentage_result)
            return
          end

          def features()
            send_features()
            return recv_features()
          end

          def send_features()
            send_message('features', Features_args)
          end

          def recv_features()
            result = receive_message(Features_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'features failed: unknown result')
          end

          def activeFeatures()
            send_activeFeatures()
            return recv_activeFeatures()
          end

          def send_activeFeatures()
            send_message('activeFeatures', ActiveFeatures_args)
          end

          def recv_activeFeatures()
            result = receive_message(ActiveFeatures_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'activeFeatures failed: unknown result')
          end

          def activeFeaturesForUser(userId)
            send_activeFeaturesForUser(userId)
            return recv_activeFeaturesForUser()
          end

          def send_activeFeaturesForUser(userId)
            send_message('activeFeaturesForUser', ActiveFeaturesForUser_args, :userId => userId)
          end

          def recv_activeFeaturesForUser()
            result = receive_message(ActiveFeaturesForUser_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'activeFeaturesForUser failed: unknown result')
          end

          def get(feature)
            send_get(feature)
            return recv_get()
          end

          def send_get(feature)
            send_message('get', Get_args, :feature => feature)
          end

          def recv_get()
            result = receive_message(Get_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get failed: unknown result')
          end

          def multiGet(features)
            send_multiGet(features)
            return recv_multiGet()
          end

          def send_multiGet(features)
            send_message('multiGet', MultiGet_args, :features => features)
          end

          def recv_multiGet()
            result = receive_message(MultiGet_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiGet failed: unknown result')
          end

          def deleteFeature(feature)
            send_deleteFeature(feature)
            recv_deleteFeature()
          end

          def send_deleteFeature(feature)
            send_message('deleteFeature', DeleteFeature_args, :feature => feature)
          end

          def recv_deleteFeature()
            result = receive_message(DeleteFeature_result)
            return
          end

          def activateGroup(feature, group)
            send_activateGroup(feature, group)
            recv_activateGroup()
          end

          def send_activateGroup(feature, group)
            send_message('activateGroup', ActivateGroup_args, :feature => feature, :group => group)
          end

          def recv_activateGroup()
            result = receive_message(ActivateGroup_result)
            return
          end

          def deactivateGroup(feature, group)
            send_deactivateGroup(feature, group)
            recv_deactivateGroup()
          end

          def send_deactivateGroup(feature, group)
            send_message('deactivateGroup', DeactivateGroup_args, :feature => feature, :group => group)
          end

          def recv_deactivateGroup()
            result = receive_message(DeactivateGroup_result)
            return
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_isActive(seqid, iprot, oprot)
            args = read_args(iprot, IsActive_args)
            result = IsActive_result.new()
            result.success = @handler.isActive(args.feature)
            write_result(result, oprot, 'isActive', seqid)
          end

          def process_isActiveForUser(seqid, iprot, oprot)
            args = read_args(iprot, IsActiveForUser_args)
            result = IsActiveForUser_result.new()
            result.success = @handler.isActiveForUser(args.feature, args.userId)
            write_result(result, oprot, 'isActiveForUser', seqid)
          end

          def process_activate(seqid, iprot, oprot)
            args = read_args(iprot, Activate_args)
            result = Activate_result.new()
            @handler.activate(args.feature)
            write_result(result, oprot, 'activate', seqid)
          end

          def process_activatePercentage(seqid, iprot, oprot)
            args = read_args(iprot, ActivatePercentage_args)
            result = ActivatePercentage_result.new()
            @handler.activatePercentage(args.feature, args.percentage)
            write_result(result, oprot, 'activatePercentage', seqid)
          end

          def process_features(seqid, iprot, oprot)
            args = read_args(iprot, Features_args)
            result = Features_result.new()
            result.success = @handler.features()
            write_result(result, oprot, 'features', seqid)
          end

          def process_activeFeatures(seqid, iprot, oprot)
            args = read_args(iprot, ActiveFeatures_args)
            result = ActiveFeatures_result.new()
            result.success = @handler.activeFeatures()
            write_result(result, oprot, 'activeFeatures', seqid)
          end

          def process_activeFeaturesForUser(seqid, iprot, oprot)
            args = read_args(iprot, ActiveFeaturesForUser_args)
            result = ActiveFeaturesForUser_result.new()
            result.success = @handler.activeFeaturesForUser(args.userId)
            write_result(result, oprot, 'activeFeaturesForUser', seqid)
          end

          def process_get(seqid, iprot, oprot)
            args = read_args(iprot, Get_args)
            result = Get_result.new()
            result.success = @handler.get(args.feature)
            write_result(result, oprot, 'get', seqid)
          end

          def process_multiGet(seqid, iprot, oprot)
            args = read_args(iprot, MultiGet_args)
            result = MultiGet_result.new()
            result.success = @handler.multiGet(args.features)
            write_result(result, oprot, 'multiGet', seqid)
          end

          def process_deleteFeature(seqid, iprot, oprot)
            args = read_args(iprot, DeleteFeature_args)
            result = DeleteFeature_result.new()
            @handler.deleteFeature(args.feature)
            write_result(result, oprot, 'deleteFeature', seqid)
          end

          def process_activateGroup(seqid, iprot, oprot)
            args = read_args(iprot, ActivateGroup_args)
            result = ActivateGroup_result.new()
            @handler.activateGroup(args.feature, args.group)
            write_result(result, oprot, 'activateGroup', seqid)
          end

          def process_deactivateGroup(seqid, iprot, oprot)
            args = read_args(iprot, DeactivateGroup_args)
            result = DeactivateGroup_result.new()
            @handler.deactivateGroup(args.feature, args.group)
            write_result(result, oprot, 'deactivateGroup', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class IsActive_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURE = 1

          FIELDS = {
            FEATURE => {:type => ::Thrift::Types::STRING, :name => 'feature'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsActive_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsActiveForUser_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURE = 1
          USERID = 2

          FIELDS = {
            FEATURE => {:type => ::Thrift::Types::STRING, :name => 'feature'},
            USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class IsActiveForUser_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Activate_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURE = 1

          FIELDS = {
            FEATURE => {:type => ::Thrift::Types::STRING, :name => 'feature'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Activate_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActivatePercentage_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURE = 1
          PERCENTAGE = 2

          FIELDS = {
            FEATURE => {:type => ::Thrift::Types::STRING, :name => 'feature'},
            PERCENTAGE => {:type => ::Thrift::Types::I32, :name => 'percentage'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActivatePercentage_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Features_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Features_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActiveFeatures_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActiveFeatures_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActiveFeaturesForUser_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USERID = 1

          FIELDS = {
            USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActiveFeaturesForUser_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURE = 1

          FIELDS = {
            FEATURE => {:type => ::Thrift::Types::STRING, :name => 'feature'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Com::Personali::RolloutThrift::TFeature}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class MultiGet_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURES = 1

          FIELDS = {
            FEATURES => {:type => ::Thrift::Types::LIST, :name => 'features', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class MultiGet_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Com::Personali::RolloutThrift::TFeature}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class DeleteFeature_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURE = 1

          FIELDS = {
            FEATURE => {:type => ::Thrift::Types::STRING, :name => 'feature'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class DeleteFeature_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActivateGroup_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURE = 1
          GROUP = 2

          FIELDS = {
            FEATURE => {:type => ::Thrift::Types::STRING, :name => 'feature'},
            GROUP => {:type => ::Thrift::Types::STRING, :name => 'group'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ActivateGroup_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class DeactivateGroup_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEATURE = 1
          GROUP = 2

          FIELDS = {
            FEATURE => {:type => ::Thrift::Types::STRING, :name => 'feature'},
            GROUP => {:type => ::Thrift::Types::STRING, :name => 'group'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class DeactivateGroup_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
